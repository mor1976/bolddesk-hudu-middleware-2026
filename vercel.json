const express = require('express');
const axios = require('axios');
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.text());
app.use(express.raw());
app.use(cors());

// Configuration
const BOLDDESK_API_KEY = process.env.BOLDDESK_API_KEY;
const HUDU_API_KEY = process.env.HUDU_API_KEY;
const HUDU_BASE_URL = process.env.HUDU_BASE_URL;

// Root endpoint
app.get('/', (req, res) => {
    res.send(`
        <!DOCTYPE html>
        <html>
        <head>
            <title>BoldDesk-Hudu Integration</title>
            <style>
                body { font-family: Arial; padding: 40px; text-align: center; }
                h1 { color: #333; }
                .links { margin-top: 30px; }
                a { display: inline-block; margin: 10px; padding: 10px 20px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; }
                a:hover { background: #0056b3; }
            </style>
        </head>
        <body>
            <h1>🔗 BoldDesk-Hudu Integration</h1>
            <p>System is running!</p>
            <div class="links">
                <a href="/dashboard">Dashboard</a>
                <a href="/test">Test Page</a>
                <a href="/health">Health Check</a>
            </div>
        </body>
        </html>
    `);
});

// Dashboard endpoint
app.get('/dashboard', (req, res) => {
    const dashboardHTML = `<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BoldDesk-Hudu Dashboard</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container { max-width: 1200px; margin: 0 auto; }
        .header {
            background: white;
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
            text-align: center;
        }
        .logo {
            font-size: 28px;
            font-weight: bold;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .status {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
        }
        .status-item {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            background: #f8f9fa;
            border-radius: 20px;
        }
        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #28a745;
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 30px;
        }
        .card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
        }
        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f0f0f0;
        }
        .card-title {
            font-size: 20px;
            font-weight: 600;
            color: #333;
        }
        .badge {
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
        }
        .badge.success { background: #d4edda; color: #155724; }
        .info-row {
            display: flex;
            justify-content: space-between;
            padding: 12px 0;
            border-bottom: 1px solid #f5f5f5;
        }
        .info-label {
            color: #666;
            font-size: 14px;
        }
        .info-value {
            color: #333;
            font-weight: 500;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">🔗 BoldDesk-Hudu Integration Dashboard</div>
            <div class="status">
                <div class="status-item">
                    <span class="status-dot"></span>
                    <span>BoldDesk ${BOLDDESK_API_KEY ? 'מחובר' : 'לא מחובר'}</span>
                </div>
                <div class="status-item">
                    <span class="status-dot"></span>
                    <span>Hudu ${HUDU_API_KEY ? 'מחובר' : 'לא מחובר'}</span>
                </div>
            </div>
        </div>
        
        <div class="dashboard">
            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">🎫 טיקט אחרון - BoldDesk</h2>
                    <span class="badge success">פעיל</span>
                </div>
                <div class="info-row">
                    <span class="info-label">מספר טיקט:</span>
                    <span class="info-value">#65559</span>
                </div>
                <div class="info-row">
                    <span class="info-label">נושא:</span>
                    <span class="info-value">test</span>
                </div>
                <div class="info-row">
                    <span class="info-label">מבקש:</span>
                    <span class="info-value">mormoria5@gmail.com</span>
                </div>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">👤 לקוח אחרון - Hudu</h2>
                    <span class="badge success">נמצא</span>
                </div>
                <div class="info-row">
                    <span class="info-label">שם:</span>
                    <span class="info-value">מוריה נחמני</span>
                </div>
                <div class="info-row">
                    <span class="info-label">חברה:</span>
                    <span class="info-value">Friend Mizra</span>
                </div>
                <div class="info-row">
                    <span class="info-label">מייל:</span>
                    <span class="info-value">mormoria5@gmail.com</span>
                </div>
            </div>
        </div>
    </div>
</body>
</html>`;
    
    res.setHeader('Content-Type', 'text/html; charset=utf-8');
    res.send(dashboardHTML);
});

// Health check endpoint
app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        service: 'BoldDesk-Hudu Middleware',
        config: {
            bolddesk: BOLDDESK_API_KEY ? 'Configured' : 'Not configured',
            hudu: HUDU_API_KEY ? 'Configured' : 'Not configured'
        }
    });
});

// Test page endpoint
app.get('/test', (req, res) => {
    const html = `
    <!DOCTYPE html>
    <html>
    <head>
        <title>BoldDesk-Hudu Test</title>
        <style>
            body { font-family: Arial; padding: 40px; background: #f5f5f5; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .status { padding: 15px; border-radius: 5px; margin: 20px 0; }
            .success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
            .warning { background: #fff3cd; color: #856404; border: 1px solid #ffeaa7; }
            button { background: #007bff; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; }
            button:hover { background: #0056b3; }
            pre { background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🔧 BoldDesk-Hudu Integration Test</h1>
            
            <div class="status ${BOLDDESK_API_KEY ? 'success' : 'warning'}">
                <strong>BoldDesk API:</strong> ${BOLDDESK_API_KEY ? '✅ Configured' : '⚠️ Not configured'}
            </div>
            
            <div class="status ${HUDU_API_KEY ? 'success' : 'warning'}">
                <strong>Hudu API:</strong> ${HUDU_API_KEY ? '✅ Configured' : '⚠️ Not configured'}
            </div>
            
            <div class="status ${HUDU_BASE_URL ? 'success' : 'warning'}">
                <strong>Hudu URL:</strong> ${HUDU_BASE_URL || 'Not configured'}
            </div>
            
            <h2>Test Webhook</h2>
            <button onclick="testWebhook()">Send Test Webhook</button>
            
            <div id="result"></div>
            
            <script>
                async function testWebhook() {
                    const testData = {
                        ticket: {
                            id: "TEST-001",
                            subject: "Test Ticket",
                            customer: {
                                email: "test@example.com",
                                name: "Test User"
                            }
                        }
                    };
                    
                    try {
                        const response = await fetch('/bolddesk-webhook', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(testData)
                        });
                        
                        const result = await response.json();
                        document.getElementById('result').innerHTML = 
                            '<h3>Response:</h3><pre>' + JSON.stringify(result, null, 2) + '</pre>';
                    } catch (error) {
                        document.getElementById('result').innerHTML = 
                            '<div class="status warning">Error: ' + error.message + '</div>';
                    }
                }
            </script>
        </div>
    </body>
    </html>
    `;
    res.send(html);
});

// Main webhook endpoint
app.post('/bolddesk-webhook', async (req, res) => {
    try {
        console.log('=== WEBHOOK RECEIVED ===');
        console.log('Headers:', JSON.stringify(req.headers, null, 2));
        console.log('Body type:', typeof req.body);
        console.log('Raw body:', JSON.stringify(req.body, null, 2));
        
        let customerEmail = null;
        let ticketData = req.body;
        
        if (typeof ticketData === 'string') {
            try {
                ticketData = JSON.parse(ticketData);
            } catch (e) {
                console.log('Failed to parse string body:', e.message);
            }
        }
        
        // Find email function
        function findEmail(obj) {
            if (!obj) return null;
            
            // Direct search - including EmailId
            if (obj.email) return obj.email;
            if (obj.Email) return obj.Email;
            if (obj.EmailId) return obj.EmailId;
            
            // Nested structures - including requester.EmailId
            if (obj.requester?.EmailId) return obj.requester.EmailId;
            if (obj.requester?.email) return obj.requester.email;
            if (obj.customer?.email) return obj.customer.email;
            
            // Recursive search
            for (let key in obj) {
                if (typeof obj[key] === 'object' && obj[key] !== null) {
                    const found = findEmail(obj[key]);
                    if (found) return found;
                }
            }
            
            return null;
        }
        
        customerEmail = findEmail(ticketData);
        console.log('Extracted email:', customerEmail);
        
        // Search in Hudu if email found
        let huduAssets = null;
        if (customerEmail && HUDU_API_KEY && HUDU_BASE_URL) {
            try {
                console.log('Searching Hudu for email:', customerEmail);
                const huduResponse = await axios.get(
                    `${HUDU_BASE_URL}/api/v1/assets`,
                    {
                        headers: {
                            'x-api-key': HUDU_API_KEY,
                            'Content-Type': 'application/json'
                        },
                        params: {
                            search: customerEmail
                        }
                    }
                );
                huduAssets = huduResponse.data;
                console.log('Hudu search results:', huduAssets);
            } catch (huduError) {
                console.error('Hudu search error:', huduError.message);
            }
        }
        
        const response = {
            success: true,
            message: customerEmail ? 
                `Customer email found: ${customerEmail}` : 
                'Webhook received but no customer email found',
            data: {
                customerEmail: customerEmail,
                timestamp: new Date().toISOString(),
                huduConnected: !!(HUDU_API_KEY && HUDU_BASE_URL),
                huduAssetsFound: huduAssets?.assets?.length || 0
            }
        };
        
        console.log('Sending response:', JSON.stringify(response, null, 2));
        res.status(200).json(response);
        
    } catch (error) {
        console.error('=== WEBHOOK ERROR ===');
        console.error('Error details:', error);
        
        const errorResponse = {
            success: false,
            error: error.message,
            timestamp: new Date().toISOString()
        };
        
        res.status(200).json(errorResponse);
    }
});

// Test endpoint with specific email
app.get('/test/:email', (req, res) => {
    const email = req.params.email;
    res.json({
        email: email,
        status: 'success',
        message: 'Test endpoint working',
        hudu_api_key: HUDU_API_KEY ? 'Set' : 'Missing',
        hudu_url: HUDU_BASE_URL || 'Missing',
        timestamp: new Date().toISOString()
    });
});

// Catch all other routes
app.get('*', (req, res) => {
    res.status(404).send(`
        <!DOCTYPE html>
        <html>
        <head>
            <title>404 - Not Found</title>
            <style>
                body { font-family: Arial; padding: 40px; text-align: center; }
                h1 { color: #dc3545; }
                a { color: #007bff; }
            </style>
        </head>
        <body>
            <h1>404 - Page Not Found</h1>
            <p>The page "${req.path}" was not found.</p>
            <p><a href="/">Go to Home</a> | <a href="/dashboard">Go to Dashboard</a></p>
        </body>
        </html>
    `);
});

// Start server (for local development)
if (process.env.NODE_ENV !== 'production' && !process.env.VERCEL) {
    app.listen(PORT, () => {
        console.log(`🚀 Server running on port ${PORT}`);
        console.log(`📝 Dashboard: http://localhost:${PORT}/dashboard`);
        console.log(`🔧 Test page: http://localhost:${PORT}/test`);
    });
}

// Export for Vercel
module.exports = app;
